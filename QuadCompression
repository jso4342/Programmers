package teamNew;

import java.util.Arrays;

public class QuadCompression {
	
	public static int check(int[][] arr, int x, int y, int len) { 
						// 전체 배열 , x 좌표, y 좌표, 검사해야하는 크기 
		int count = 0;
		
		for (int i = 0; i < len; i++) {
			for (int j = 0; j < len; j++) {
				if (arr[x][y] == 1) {count++;}
				y++;
			}
			x++;
			y = y - len;
		}
		if (count == Math.pow(2, len)) {return 1;}  // 전체가 1 이면 
		else if (count == 0) {return 0;}
		return -1;
	}
	
	 /*
     *  {{1,1,0,0}, 
     *   {1,0,0,0},
     *   {1,0,0,1},
     *   {1,1,1,1}};
     *   
     *   [0][0] [0][1] [0][2] [0][3] 
     *   [1][0] [1][1] [1][2] [1][3]
     *   [2][0] [2][1] [2][2] [2][3]
     *   [3][0] [3][1] [3][2] [3][3] 
     */
	
	public static int[] compression(int[][] arr, int x, int y, int len) {
									// 				첫 시작 좌표, 현재 n 
	int[] answer = {};
	
	
	return answer;
	}
	
	public static int[] solution(int[][] arr) {
        int[] answer = {};
        
        int size = arr[0].length;  // 박스의 길이
        // 이걸 /2 해 가면서 압축을 해야함 
      
        int len = size/2; // 내가 검증하는 박스 길이의 1/2 (1/4 로 들어가는 길이)
        						 // 얘가 1이 될 때 까지 하는 것임 
        int x = 0;
        int y = 0;
        
//        while(len != 1) { // len == 1 일 때 멈춤 
//        	
//        }
        //check(int[][] arr, int x, int y, int len)
        System.out.println(check(arr, 4,4,4));
        // 근데 이 프로세스가 다 다른 메소드에서 되어야함 
        // 1. 처음 2차원 배열을 4등분  (길이 / 2 가 매개변수) 
        // 1/4 부분을 가지고 검사 
        // - 통과했다면 전체 0 또는 1로 표기 
        // - 통과하지 못한 것을 또 4등분 (1로 돌아감) -> (현재 길이 / 2 가 매개변수) 
        //    ㄴ 반복 recursive
        // 		그럼 결국 1이 될 때 까지 해야된 다는 것이다. 
        
        
        
        // 맨 껍데기는 while 문이 맞음 
        
      
        	
        //	len = len/2;   // 근데 한 번 할 수록 검사할 게 많아진다.. 
        				   //recursive 써야될 거 같음  
     
      
        
        
        return answer;
    }
	
	public static void main(String[] args) {
	//	int[][] arr = {{1,1,0,0},{1,0,0,0},{1,0,0,1},{1,1,1,1}};
		
		int[][] arr = {{1,1,1,1,1,1,1,1},
					{0,1,1,1,1,1,1,1},
					{0,0,0,0,1,1,1,1},
					{0,1,0,0,1,1,1,1},
					{0,0,0,0,0,0,1,1},
					{0,0,0,0,0,0,0,1},
					{0,0,0,0,1,0,0,1},
					{0,0,0,0,1,1,1,1}};
				
		
		
		System.out.println(Arrays.toString(solution(arr)));
		
	}
}
