
import java.util.Arrays;

class Solution {
    public static int[] answer; // [0,1]
    
    public static int check(int[][] arr, int x, int y, int n) {
   
        for (int i = x; i < x + n; i++) {
			for (int j = y; j < y + n; j++) {
				if (arr[i][j] != arr[x][y]) {return -1;}
			}
		}
        answer[arr[x][y]]++;
		return 0;
        
        
        /*
		if (count == (int)Math.pow(2, n)) {
			answer[1]++;
			return 0;
			}  // 전체가 1 이면 
	
		else if (count == 0) {
			answer[0]++;
			return 0;
			}
        else{
            return -1;
        }
		*/
  
        
        
        
    }
	public static void compression(int[][] arr, int x, int y, int n) {
	
        if (n == 1) {
			if (arr[x][y] == 1) {answer[1]++;}
			else {answer[0]++;}
			return;
		}
        
		if(check(arr, x, y, n) == 0){	
			return;
		}
		
		compression(arr, x ,y, n/2);
		compression(arr, x + n/2, y, n/2);
		compression(arr, x, y + n/2, n/2);
		compression(arr, x + n/2, y + n/2, n/2);
	}
	
	public static int[] solution(int[][] arr) {
        answer = new int[2];
        compression(arr, 0, 0, arr[0].length);
        return answer;
    }
}
